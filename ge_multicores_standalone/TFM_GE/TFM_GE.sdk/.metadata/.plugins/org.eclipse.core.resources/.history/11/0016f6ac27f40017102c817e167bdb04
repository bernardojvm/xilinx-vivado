/*
 * main.c
 *
 *  Created on: 15 nov. 2017
 *      Author: Bernardo
 */
#include "xparameters.h"
#include <stdio.h>
#include "xuartps.h"	// if PS uart is used
#include "xscutimer.h"  // if PS Timer is used
#include "xaxicdma.h"	// if CDMA is used
#include "xscugic.h" 	// if PS GIC is used
#include "xil_exception.h"	// if interrupt is used
#include "xil_cache.h"
#include "xil_printf.h"
#include "xil_types.h"
#include "pBlaze.h"
#include "ROM.h"

#define RESET_LOOP_COUNT	10	// Number of times to check reset is done
#define N_DATA 100
#define LENGTH 8192 // source and destination buffers lengths in number of bytes
#define PROCESSOR_PBLAZE1 0x43C00000 // PICOBLAZE ADDRESS

#define CDMA_BRAM_MEMORY1 0xC0000000 // BRAM Port A mapped through 1nd BRAM Controller accessed by CDMA
#define CDMA_BRAM_MEMORY2 0xC2000000 // BRAM Port A mapped through 2nd BRAM Controller accessed by CDMA
#define CDMA_BRAM_MEMORY3 0xC4000000 // BRAM Port A mapped through 3nd BRAM Controller accessed by CDMA
#define CDMA_BRAM_MEMORY4 0xC6000000 // BRAM Port A mapped through 3nd BRAM Controller accessed by CDMA

#define DDR_MEMORY 0x01000000
#define TIMER_DEVICE_ID	XPAR_SCUTIMER_DEVICE_ID// timer
#define TIMER_LOAD_VALUE 0xFFFFFFFF				//timer
#define INTC_DEVICE_INT_ID XPAR_SCUGIC_SINGLE_DEVICE_ID //interruption

volatile static u8 * destination=NULL;
volatile static int count=0;
volatile static u32 result1,result2,result3,result4;

XUartPs Uart_PS;		/* Instance of the UART Device */
XScuTimer Timer;		/* Cortex A9 SCU Private Timer Instance */
XAxiCdma xcdma;
XScuTimer *TimerInstancePtr = &Timer;

//INTERRUPTION

XScuGic InterruptController; /* Instance of the Interrupt Controller */
static XScuGic_Config *GicConfig;/* The configuration parameters of the controller */
int ScuGicInterrupt_Init(int FPGA_INT_ID );
static void Ready_new_Value(void *baseaddr_p);


int getNumber ();
uint8_t menu(void);
void cdma_transfer(int modo,u8 * cdma_memory,u8 * source, int numofbytes);

int main (void) {

	u32 * source=NULL;
    u8 * cdma_memory1;
	u8 * cdma_memory2;
	u8 * cdma_memory3;
	u8 * cdma_memory4;

    int test_done = 0;
    int numofbytes;
    int select;
    int Status;

	// UART related definitions
    XUartPs_Config *Config;

	// PS Timer related definitions
	XScuTimer_Config *ConfigPtr;

	// CDMA related definitions
    XAxiCdma_Config * CdmaCfgPtr;

    // INTERRUPTION
	int xstatus;
	xstatus = ScuGicInterrupt_Init(XPS_FPGA1_INT_ID);
	if (xstatus != XST_SUCCESS) {
		print("ERROR INTERRUPCION\r\n");
		return XST_FAILURE;
	}

	// Initialize UART
	// Look up the configuration in the config table, then initialize it.
	Config = XUartPs_LookupConfig(XPAR_PS7_UART_1_DEVICE_ID);
	if (NULL == Config) {
		return XST_FAILURE;
	}
	Status = XUartPs_CfgInitialize(&Uart_PS, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	// Initialize timer counter
	ConfigPtr = XScuTimer_LookupConfig(TIMER_DEVICE_ID);
	Status = XScuTimer_CfgInitialize(TimerInstancePtr, ConfigPtr,
				 ConfigPtr->BaseAddr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	// Disable DCache
	Xil_DCacheDisable();

	// Set options for timer/counter 0
	// Load the timer counter register.
	XScuTimer_LoadTimer(TimerInstancePtr, TIMER_LOAD_VALUE);

	// Start the Scu Private Timer device.
	XScuTimer_Start(TimerInstancePtr);
    print("-- Simple Design Example --\r\n");

    // Setup DMA Controller
    CdmaCfgPtr = XAxiCdma_LookupConfig(XPAR_AXI_CDMA_0_DEVICE_ID);
   	if (!CdmaCfgPtr) {
   		return XST_FAILURE;
   	}
   	Status = XAxiCdma_CfgInitialize(&xcdma , CdmaCfgPtr, CdmaCfgPtr->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
		xil_printf("Status=%x\r\n",Status);
	}

	print("Numero de instrucciones a transferir entre 1 y 2048\r\n");
	numofbytes =0;
    do{
    	numofbytes = getNumber();
    }while(numofbytes == 0);
    if(numofbytes > 8192)
    	numofbytes = 8192;
    select = menu();
    test_done = 0;
    while(test_done==0)
    {
		switch(select)
		{
			case '1' :
				source = (u32 *)DDR_MEMORY;
				cdma_memory1 = (u8 *)CDMA_BRAM_MEMORY1;
				cdma_memory2 = (u8 *)CDMA_BRAM_MEMORY2;
				cdma_memory3 = (u8 *)CDMA_BRAM_MEMORY3;
				cdma_memory4 = (u8 *)CDMA_BRAM_MEMORY4;
				print("DDR a BRAM\r\n");
				break;
			case '2' :
				test_done = 1;
				break;
			default :
				break;
		}
		if(test_done)
			break;
		print("Inicio de la transferencia a traves del DMA\r\n");
		// Initialize src memory
		for (int i=0; i<numofbytes/4; i++)
			*(source+i) = instruction[i];
		cdma_transfer(0,cdma_memory1,(u8 *)source,numofbytes);
		for (int i=0; i<numofbytes/4; i++)
			*(source+i) = instruction2[i];
		cdma_transfer(0,cdma_memory2,(u8 *)source,numofbytes);
		for (int i=0; i<numofbytes/4; i++)
			*(source+i) = instruction3[i];
		cdma_transfer(0,cdma_memory3,(u8 *)source,numofbytes);
		for (int i=0; i<numofbytes/4; i++)
			*(source+i) = instruction4[i];
		cdma_transfer(0,cdma_memory4,(u8 *)source,numofbytes);

		PBLAZE_mWriteReg(PROCESSOR_PBLAZE1, PBLAZE_S_AXI_SLV_REG0_OFFSET, 0x00001800);
		PBLAZE_mWriteReg(PROCESSOR_PBLAZE1, PBLAZE_S_AXI_SLV_REG1_OFFSET, 0x00001000);
		PBLAZE_mWriteReg(PROCESSOR_PBLAZE1, PBLAZE_S_AXI_SLV_REG2_OFFSET, 0x00000000);
		PBLAZE_mWriteReg(PROCESSOR_PBLAZE1, PBLAZE_S_AXI_SLV_REG3_OFFSET, 0x00000001);

		while(count<=N_DATA-1);
		count=0;
		XScuGic_Enable(&InterruptController, 62);
		cdma_transfer(1,cdma_memory1,(u8 *)source,4);
		printf("Valor final memoria pbm1:%x: %.2f \r\n",N_DATA,((float)source[0]));///4096));
		cdma_transfer(1,cdma_memory2,(u8 *)source,4);
		printf("Valor final memoria pbs2:%x: %.2f \r\n",N_DATA,((float)source[0]));///4096));
		cdma_transfer(1,cdma_memory3,(u8 *)source,4);
		printf("Valor final memoria pbs3:%x: %.2f \r\n",N_DATA,((float)source[0]));///4096));
		cdma_transfer(1,cdma_memory4,(u8 *)source,4);
		printf("Valor final memoria pbs4:%x: %.2f \r\n",N_DATA,((float)source[0]));///4096));

		//		for (int i = 0; i < 140/4; i++) {
//				if ( instruction[i] != source[i]) {
//					xil_printf("Data match failed at = %d, source data = %x, destination data = %x\n\r",i,source[i],instruction[i]);
		//			break;
//				}
//			}
		print("DATOS RECIBIDOS\r\n");
		select = menu();
    }
    print("-- SALIDA --\r\n");
    return 0;
}

void Ready_new_Value(void *baseaddr_p){
	if(count<N_DATA-1){
//	result1=PBLAZE_mReadReg(PROCESSOR_PBLAZE1, PBLAZE_S_AXI_SLV_REG0_OFFSET);
//	printf("Valor recibido %x: %.2f \r\n",count,((float)result1));
//	printf("Valor recibido %x: %.2f \r\n",count,((float)result1/4096));
	count++;
	PBLAZE_mWriteReg(PROCESSOR_PBLAZE1, PBLAZE_S_AXI_SLV_REG0_OFFSET, 0x00001800);
	PBLAZE_mWriteReg(PROCESSOR_PBLAZE1, PBLAZE_S_AXI_SLV_REG1_OFFSET, 0x00100000);
	PBLAZE_mWriteReg(PROCESSOR_PBLAZE1, PBLAZE_S_AXI_SLV_REG2_OFFSET, 0x00000000);
		if (count<N_DATA-1){
				PBLAZE_mWriteReg(PROCESSOR_PBLAZE1, PBLAZE_S_AXI_SLV_REG3_OFFSET, 0x00000001);
		}
		else{
				PBLAZE_mWriteReg(PROCESSOR_PBLAZE1, PBLAZE_S_AXI_SLV_REG3_OFFSET, 0x00000003);
		}
	}
	else{
	count=N_DATA;
	result1=PBLAZE_mReadReg(PROCESSOR_PBLAZE1, PBLAZE_S_AXI_SLV_REG0_OFFSET);
	printf("Valor final AXI recibido %x: %.2f \r\n",N_DATA,((float)result1));
//	printf("Valor final recibido %x: %.2f \r\n",N_DATA-1,((float)result1/4096));
	XScuGic_Disable(&InterruptController, 62);
	}
}


void cdma_transfer(int modo,u8 * cdma_memory,u8 * source, int numofbytes){
	int CDMA_Status,Status;
	//int32_t polled_cycles;
	volatile u32 CntValue1;
	XScuTimer_RestartTimer(TimerInstancePtr);
	if(modo==0)//ESCRIBIR
			Status = XAxiCdma_SimpleTransfer(&xcdma, (u32) source, (u32) cdma_memory, numofbytes, NULL, NULL);
	else//LEER
			Status = XAxiCdma_SimpleTransfer(&xcdma, (u32) cdma_memory, (u32) source, numofbytes, NULL, NULL);

	if (Status != XST_SUCCESS) {
			CDMA_Status = XAxiCdma_GetError(&xcdma);
			if (CDMA_Status != 0x0) {
				XAxiCdma_Reset(&xcdma);
				xil_printf("Error Code = %x\r\n",CDMA_Status);
			}
			return XST_FAILURE;
	}

	while (XAxiCdma_IsBusy(&xcdma)); // Wait
	CntValue1 = XScuTimer_GetCounterValue(TimerInstancePtr);
	CDMA_Status = XAxiCdma_GetError(&xcdma);

	if (CDMA_Status != 0x0) {
			XAxiCdma_Reset(&xcdma);
			xil_printf("Error Code = %x\r\n",CDMA_Status);
	}
	else {
			xil_printf("Movidos %d bytes a traves del DMA toma %d ciclos del reloj\r\n", numofbytes, TIMER_LOAD_VALUE-CntValue1);
			print("Transferencia completa\r\n");
			}
}

int getNumber(){

	uint8_t byte;
	uint8_t uartBuffer[16];
	int validNumber;
	int digitIndex;
	int digit, number, sign;
	int c;
	while(1){
		byte = 0x00;
		digit = 0;
		digitIndex = 0;
		number = 0;
		validNumber = TRUE;
		//get bytes from uart until RETURN is entered
		while(byte != 0x0d){//0x0d enter
			while (!XUartPs_IsReceiveData(STDIN_BASEADDRESS));
			byte = XUartPs_ReadReg(STDIN_BASEADDRESS,XUARTPS_FIFO_OFFSET);
			uartBuffer[digitIndex] = byte;
			XUartPs_Send(&Uart_PS, &byte, 1);
			digitIndex++;
		}
		//calculate number from string of digits
		for(c = 0; c < (digitIndex - 1); c++){
			if(c == 0){
				//check if first byte is a "-"
				if(uartBuffer[c] == 0x2D){
					sign = -1;
					digit = 0;
				}
				//check if first byte is a digit
				else if((uartBuffer[c] >> 4) == 0x03){//comprueba q sea el ascci de un numero 0x30
					sign = 1;
					digit = (uartBuffer[c] & 0x0F);
				}
				else
					validNumber = FALSE;
			}
			else{
				//check byte is a digit
				if((uartBuffer[c] >> 4) == 0x03){
					digit = (uartBuffer[c] & 0x0F);
				}
				else
					validNumber = FALSE;
			}
			number = (number * 10) + digit;
		}
		number *= sign;
		if(validNumber == TRUE){
			print("\r\n");
			return number*4; //number of bytes
		}
		print("No es un numero valido.\n\r");
	}
}

uint8_t menu(void)
{
	uint8_t byte;
	print("Ingrese 1 para iniciar la transferencia de instrucciones(DDR a BRAM)\r\n");
	print("Ingrese 2 para salir\r\n");
	while (!XUartPs_IsReceiveData(STDIN_BASEADDRESS));//lee y envia la opcion seleccionada
	byte = XUartPs_ReadReg(STDIN_BASEADDRESS,XUARTPS_FIFO_OFFSET);
	XUartPs_Send(&Uart_PS, &byte, 1);
	return(byte);
}

int ScuGicInterrupt_Init(int FPGA_INT_ID)
{
	int Status;
	/*
	 * Initialize the interrupt controller driver so that it is ready to
	 * use.
	 * */
	Xil_ExceptionInit();

	GicConfig = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
	if (NULL == GicConfig) {
		return XST_FAILURE;
	}

	Status = XScuGic_CfgInitialize(&InterruptController, GicConfig,
			GicConfig->CpuBaseAddress);

	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	/*
	 * Connect the interrupt controller interrupt handler to the hardware
	 * interrupt handling logic in the ARM processor.
	 */
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT,
			(Xil_ExceptionHandler) XScuGic_InterruptHandler,
			(void *) &InterruptController);
	/*
	 * Connect a device driver handler that will be called when an
	 * interrupt for the device occurs, the device driver handler performs
	 * the specific interrupt processing for the device
	 */
	Status = XScuGic_Connect(&InterruptController,FPGA_INT_ID,
			(Xil_ExceptionHandler)Ready_new_Value,
			(void *)&InterruptController);
	XScuGic_Enable(&InterruptController, FPGA_INT_ID);
	/*
	 * Enable interrupts in the ARM
	 */
	Xil_ExceptionEnable();
	XScuGic_SetPriorityTriggerType(&InterruptController, FPGA_INT_ID,0xa0, 3);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
}

